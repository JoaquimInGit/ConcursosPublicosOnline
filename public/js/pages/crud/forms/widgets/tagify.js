/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 78);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/crud/forms/widgets/tagify.js":
/*!******************************************************************!*\
  !*** ./resources/metronic/js/pages/crud/forms/widgets/tagify.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Class definition\nvar KTTagifyDemos = function () {\n  // Private functions\n  var demo1 = function demo1() {\n    var input = document.getElementById('kt_tagify_1'),\n        // init Tagify script on the above inputs\n    tagify = new Tagify(input, {\n      whitelist: [\"A# .NET\", \"A# (Axiom)\", \"A-0 System\", \"A+\", \"A++\", \"ABAP\", \"ABC\", \"ABC ALGOL\", \"ABSET\", \"ABSYS\", \"ACC\", \"Accent\", \"Ace DASL\", \"ACL2\", \"Avicsoft\", \"ACT-III\", \"Action!\", \"ActionScript\", \"Ada\", \"Adenine\", \"Agda\", \"Agilent VEE\", \"Agora\", \"AIMMS\", \"Alef\", \"ALF\", \"ALGOL 58\", \"ALGOL 60\", \"ALGOL 68\", \"ALGOL W\", \"Alice\", \"Alma-0\", \"AmbientTalk\", \"Amiga E\", \"AMOS\", \"AMPL\", \"Apex (Salesforce.com)\", \"APL\", \"AppleScript\", \"Arc\", \"ARexx\", \"Argus\", \"AspectJ\", \"Assembly language\", \"ATS\", \"Ateji PX\", \"AutoHotkey\", \"Autocoder\", \"AutoIt\", \"AutoLISP / Visual LISP\", \"Averest\", \"AWK\", \"Axum\", \"Active Server Pages\", \"ASP.NET\", \"B\", \"Babbage\", \"Bash\", \"BASIC\", \"bc\", \"BCPL\", \"BeanShell\", \"Batch (Windows/Dos)\", \"Bertrand\", \"BETA\", \"Bigwig\", \"Bistro\", \"BitC\", \"BLISS\", \"Blockly\", \"BlooP\", \"Blue\", \"Boo\", \"Boomerang\", \"Bourne shell (including bash and ksh)\", \"BREW\", \"BPEL\", \"B\", \"C--\", \"C++ – ISO/IEC 14882\", \"C# – ISO/IEC 23270\", \"C/AL\", \"Caché ObjectScript\", \"C Shell\", \"Caml\", \"Cayenne\", \"CDuce\", \"Cecil\", \"Cesil\", \"Céu\", \"Ceylon\", \"CFEngine\", \"CFML\", \"Cg\", \"Ch\", \"Chapel\", \"Charity\", \"Charm\", \"Chef\", \"CHILL\", \"CHIP-8\", \"chomski\", \"ChucK\", \"CICS\", \"Cilk\", \"Citrine (programming language)\", \"CL (IBM)\", \"Claire\", \"Clarion\", \"Clean\", \"Clipper\", \"CLIPS\", \"CLIST\", \"Clojure\", \"CLU\", \"CMS-2\", \"COBOL – ISO/IEC 1989\", \"CobolScript – COBOL Scripting language\", \"Cobra\", \"CODE\", \"CoffeeScript\", \"ColdFusion\", \"COMAL\", \"Combined Programming Language (CPL)\", \"COMIT\", \"Common Intermediate Language (CIL)\", \"Common Lisp (also known as CL)\", \"COMPASS\", \"Component Pascal\", \"Constraint Handling Rules (CHR)\", \"COMTRAN\", \"Converge\", \"Cool\", \"Coq\", \"Coral 66\", \"Corn\", \"CorVision\", \"COWSEL\", \"CPL\", \"CPL\", \"Cryptol\", \"csh\", \"Csound\", \"CSP\", \"CUDA\", \"Curl\", \"Curry\", \"Cybil\", \"Cyclone\", \"Cython\", \"Java\", \"Javascript\", \"M2001\", \"M4\", \"M#\", \"Machine code\", \"MAD (Michigan Algorithm Decoder)\", \"MAD/I\", \"Magik\", \"Magma\", \"make\", \"Maple\", \"MAPPER now part of BIS\", \"MARK-IV now VISION:BUILDER\", \"Mary\", \"MASM Microsoft Assembly x86\", \"MATH-MATIC\", \"Mathematica\", \"MATLAB\", \"Maxima (see also Macsyma)\", \"Max (Max Msp – Graphical Programming Environment)\", \"Maya (MEL)\", \"MDL\", \"Mercury\", \"Mesa\", \"Metafont\", \"Microcode\", \"MicroScript\", \"MIIS\", \"Milk (programming language)\", \"MIMIC\", \"Mirah\", \"Miranda\", \"MIVA Script\", \"ML\", \"Model 204\", \"Modelica\", \"Modula\", \"Modula-2\", \"Modula-3\", \"Mohol\", \"MOO\", \"Mortran\", \"Mouse\", \"MPD\", \"Mathcad\", \"MSIL – deprecated name for CIL\", \"MSL\", \"MUMPS\", \"Mystic Programming L\"],\n      blacklist: [\".NET\", \"PHP\"] // <-- passed as an attribute in this demo\n\n    }); // \"remove all tags\" button event listener\n\n    document.getElementById('kt_tagify_1_remove').addEventListener('click', tagify.removeAllTags.bind(tagify)); // Chainable event listeners\n\n    tagify.on('add', onAddTag).on('remove', onRemoveTag).on('input', onInput).on('edit', onTagEdit).on('invalid', onInvalidTag).on('click', onTagClick).on('dropdown:show', onDropdownShow).on('dropdown:hide', onDropdownHide); // tag added callback\n\n    function onAddTag(e) {\n      console.log(\"onAddTag: \", e.detail);\n      console.log(\"original input value: \", input.value);\n      tagify.off('add', onAddTag); // exmaple of removing a custom Tagify event\n    } // tag remvoed callback\n\n\n    function onRemoveTag(e) {\n      console.log(e.detail);\n      console.log(\"tagify instance value:\", tagify.value);\n    } // on character(s) added/removed (user is typing/deleting)\n\n\n    function onInput(e) {\n      console.log(e.detail);\n      console.log(\"onInput: \", e.detail);\n    }\n\n    function onTagEdit(e) {\n      console.log(\"onTagEdit: \", e.detail);\n    } // invalid tag added callback\n\n\n    function onInvalidTag(e) {\n      console.log(\"onInvalidTag: \", e.detail);\n    } // invalid tag added callback\n\n\n    function onTagClick(e) {\n      console.log(e.detail);\n      console.log(\"onTagClick: \", e.detail);\n    }\n\n    function onDropdownShow(e) {\n      console.log(\"onDropdownShow: \", e.detail);\n    }\n\n    function onDropdownHide(e) {\n      console.log(\"onDropdownHide: \", e.detail);\n    }\n  };\n\n  var demo1Readonly = function demo1Readonly() {\n    // Readonly Mode\n    var input = document.getElementById('kt_tagify_1_1'),\n        tagify = new Tagify(input);\n    tagify.addTags([{\n      value: \"laravel\",\n      color: \"yellow\",\n      readonly: true\n    }]);\n  };\n\n  var demo2 = function demo2() {\n    var input = document.getElementById('kt_tagify_2');\n    var tagify = new Tagify(input, {\n      enforceWhitelist: true,\n      whitelist: [\"The Shawshank Redemption\", \"The Godfather\", \"The Godfather: Part II\", \"The Dark Knight\", \"12 Angry Men\", \"Schindler's List\", \"Pulp Fiction\", \"The Lord of the Rings: The Return of the King\", \"The Good, the Bad and the Ugly\", \"Fight Club\", \"The Lord of the Rings: The Fellowship of the Ring\", \"Star Wars: Episode V - The Empire Strikes Back\", \"Forrest Gump\", \"Inception\", \"The Lord of the Rings: The Two Towers\", \"One Flew Over the Cuckoo's Nest\", \"Goodfellas\", \"The Matrix\", \"Seven Samurai\", \"Star Wars: Episode IV - A New Hope\", \"City of God\", \"Se7en\", \"The Silence of the Lambs\", \"It's a Wonderful Life\", \"The Usual Suspects\", \"Life Is Beautiful\", \"Léon: The Professional\", \"Spirited Away\", \"Saving Private Ryan\", \"La La Land\", \"Once Upon a Time in the West\", \"American History X\", \"Interstellar\", \"Casablanca\", \"Psycho\", \"City Lights\", \"The Green Mile\", \"Raiders of the Lost Ark\", \"The Intouchables\", \"Modern Times\", \"Rear Window\", \"The Pianist\", \"The Departed\", \"Terminator 2: Judgment Day\", \"Back to the Future\", \"Whiplash\", \"Gladiator\", \"Memento\", \"Apocalypse Now\", \"The Prestige\", \"The Lion King\", \"Alien\", \"Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb\", \"Sunset Boulevard\", \"The Great Dictator\", \"Cinema Paradiso\", \"The Lives of Others\", \"Paths of Glory\", \"Grave of the Fireflies\", \"Django Unchained\", \"The Shining\", \"WALL·E\", \"American Beauty\", \"The Dark Knight Rises\", \"Princess Mononoke\", \"Aliens\", \"Oldboy\", \"Once Upon a Time in America\", \"Citizen Kane\", \"Das Boot\", \"Witness for the Prosecution\", \"North by Northwest\", \"Vertigo\", \"Star Wars: Episode VI - Return of the Jedi\", \"Reservoir Dogs\", \"M\", \"Braveheart\", \"Amélie\", \"Requiem for a Dream\", \"A Clockwork Orange\", \"Taxi Driver\", \"Lawrence of Arabia\", \"Like Stars on Earth\", \"Double Indemnity\", \"To Kill a Mockingbird\", \"Eternal Sunshine of the Spotless Mind\", \"Toy Story 3\", \"Amadeus\", \"My Father and My Son\", \"Full Metal Jacket\", \"The Sting\", \"2001: A Space Odyssey\", \"Singin' in the Rain\", \"Bicycle Thieves\", \"Toy Story\", \"Dangal\", \"The Kid\", \"Inglourious Basterds\", \"Snatch\", \"Monty Python and the Holy Grail\", \"Hacksaw Ridge\", \"3 Idiots\", \"L.A. Confidential\", \"For a Few Dollars More\", \"Scarface\", \"Rashomon\", \"The Apartment\", \"The Hunt\", \"Good Will Hunting\", \"Indiana Jones and the Last Crusade\", \"A Separation\", \"Metropolis\", \"Yojimbo\", \"All About Eve\", \"Batman Begins\", \"Up\", \"Some Like It Hot\", \"The Treasure of the Sierra Madre\", \"Unforgiven\", \"Downfall\", \"Raging Bull\", \"The Third Man\", \"Die Hard\", \"Children of Heaven\", \"The Great Escape\", \"Heat\", \"Chinatown\", \"Inside Out\", \"Pan's Labyrinth\", \"Ikiru\", \"My Neighbor Totoro\", \"On the Waterfront\", \"Room\", \"Ran\", \"The Gold Rush\", \"The Secret in Their Eyes\", \"The Bridge on the River Kwai\", \"Blade Runner\", \"Mr. Smith Goes to Washington\", \"The Seventh Seal\", \"Howl's Moving Castle\", \"Lock, Stock and Two Smoking Barrels\", \"Judgment at Nuremberg\", \"Casino\", \"The Bandit\", \"Incendies\", \"A Beautiful Mind\", \"A Wednesday\", \"The General\", \"The Elephant Man\", \"Wild Strawberries\", \"Arrival\", \"V for Vendetta\", \"Warrior\", \"The Wolf of Wall Street\", \"Manchester by the Sea\", \"Sunrise\", \"The Passion of Joan of Arc\", \"Gran Torino\", \"Rang De Basanti\", \"Trainspotting\", \"Dial M for Murder\", \"The Big Lebowski\", \"The Deer Hunter\", \"Tokyo Story\", \"Gone with the Wind\", \"Fargo\", \"Finding Nemo\", \"The Sixth Sense\", \"The Thing\", \"Hera Pheri\", \"Cool Hand Luke\", \"Andaz Apna Apna\", \"Rebecca\", \"No Country for Old Men\", \"How to Train Your Dragon\", \"Munna Bhai M.B.B.S.\", \"Sholay\", \"Kill Bill: Vol. 1\", \"Into the Wild\", \"Mary and Max\", \"Gone Girl\", \"There Will Be Blood\", \"Come and See\", \"It Happened One Night\", \"Life of Brian\", \"Rush\", \"Hotel Rwanda\", \"Platoon\", \"Shutter Island\", \"Network\", \"The Wages of Fear\", \"Stand by Me\", \"Wild Tales\", \"In the Name of the Father\", \"Spotlight\", \"Star Wars: The Force Awakens\", \"The Nights of Cabiria\", \"The 400 Blows\", \"Butch Cassidy and the Sundance Kid\", \"Mad Max: Fury Road\", \"The Maltese Falcon\", \"12 Years a Slave\", \"Ben-Hur\", \"The Grand Budapest Hotel\", \"Persona\", \"Million Dollar Baby\", \"Amores Perros\", \"Jurassic Park\", \"The Princess Bride\", \"Hachi: A Dog's Tale\", \"Memories of Murder\", \"Stalker\", \"Nausicaä of the Valley of the Wind\", \"Drishyam\", \"The Truman Show\", \"The Grapes of Wrath\", \"Before Sunrise\", \"Touch of Evil\", \"Annie Hall\", \"The Message\", \"Rocky\", \"Gandhi\", \"Harry Potter and the Deathly Hallows: Part 2\", \"The Bourne Ultimatum\", \"Diabolique\", \"Donnie Darko\", \"Monsters, Inc.\", \"Prisoners\", \"8½\", \"The Terminator\", \"The Wizard of Oz\", \"Catch Me If You Can\", \"Groundhog Day\", \"Twelve Monkeys\", \"Zootopia\", \"La Haine\", \"Barry Lyndon\", \"Jaws\", \"The Best Years of Our Lives\", \"Infernal Affairs\", \"Udaan\", \"The Battle of Algiers\", \"Strangers on a Train\", \"Dog Day Afternoon\", \"Sin City\", \"Kind Hearts and Coronets\", \"Gangs of Wasseypur\", \"The Help\"],\n      callbacks: {\n        add: console.log,\n        // callback when adding a tag\n        remove: console.log // callback when removing a tag\n\n      }\n    });\n  };\n\n  var demo3 = function demo3() {\n    var input = document.getElementById('kt_tagify_3'); // init Tagify script on the above inputs\n\n    var tagify = new Tagify(input); // add a class to Tagify's input element\n    //tagify.DOM.input.classList.remove('tagify__input');\n\n    tagify.DOM.input.classList.add('form-control');\n    tagify.DOM.input.setAttribute('placeholder', 'enter tag...'); // re-place Tagify's input element outside of the  element (tagify.DOM.scope), just before it\n\n    tagify.DOM.scope.parentNode.insertBefore(tagify.DOM.input, tagify.DOM.scope);\n  };\n\n  var demo4 = function demo4() {\n    var input = document.getElementById('kt_tagify_4');\n    var tagify = new Tagify(input, {\n      pattern: /^.{0,20}$/,\n      // Validate typed tag(s) by Regex. Here maximum chars length is defined as \"20\"\n      delimiters: \", \",\n      // add new tags when a comma or a space character is entered\n      maxTags: 6,\n      blacklist: [\"fuck\", \"shit\", \"pussy\"],\n      keepInvalidTags: true,\n      // do not remove invalid tags (but keep them marked as invalid)\n      whitelist: [\"temple\", \"stun\", \"detective\", \"sign\", \"passion\", \"routine\", \"deck\", \"discriminate\", \"relaxation\", \"fraud\", \"attractive\", \"soft\", \"forecast\", \"point\", \"thank\", \"stage\", \"eliminate\", \"effective\", \"flood\", \"passive\", \"skilled\", \"separation\", \"contact\", \"compromise\", \"reality\", \"district\", \"nationalist\", \"leg\", \"porter\", \"conviction\", \"worker\", \"vegetable\", \"commerce\", \"conception\", \"particle\", \"honor\", \"stick\", \"tail\", \"pumpkin\", \"core\", \"mouse\", \"egg\", \"population\", \"unique\", \"behavior\", \"onion\", \"disaster\", \"cute\", \"pipe\", \"sock\", \"dialect\", \"horse\", \"swear\", \"owner\", \"cope\", \"global\", \"improvement\", \"artist\", \"shed\", \"constant\", \"bond\", \"brink\", \"shower\", \"spot\", \"inject\", \"bowel\", \"homosexual\", \"trust\", \"exclude\", \"tough\", \"sickness\", \"prevalence\", \"sister\", \"resolution\", \"cattle\", \"cultural\", \"innocent\", \"burial\", \"bundle\", \"thaw\", \"respectable\", \"thirsty\", \"exposure\", \"team\", \"creed\", \"facade\", \"calendar\", \"filter\", \"utter\", \"dominate\", \"predator\", \"discover\", \"theorist\", \"hospitality\", \"damage\", \"woman\", \"rub\", \"crop\", \"unpleasant\", \"halt\", \"inch\", \"birthday\", \"lack\", \"throne\", \"maximum\", \"pause\", \"digress\", \"fossil\", \"policy\", \"instrument\", \"trunk\", \"frame\", \"measure\", \"hall\", \"support\", \"convenience\", \"house\", \"partnership\", \"inspector\", \"looting\", \"ranch\", \"asset\", \"rally\", \"explicit\", \"leak\", \"monarch\", \"ethics\", \"applied\", \"aviation\", \"dentist\", \"great\", \"ethnic\", \"sodium\", \"truth\", \"constellation\", \"lease\", \"guide\", \"break\", \"conclusion\", \"button\", \"recording\", \"horizon\", \"council\", \"paradox\", \"bride\", \"weigh\", \"like\", \"noble\", \"transition\", \"accumulation\", \"arrow\", \"stitch\", \"academy\", \"glimpse\", \"case\", \"researcher\", \"constitutional\", \"notion\", \"bathroom\", \"revolutionary\", \"soldier\", \"vehicle\", \"betray\", \"gear\", \"pan\", \"quarter\", \"embarrassment\", \"golf\", \"shark\", \"constitution\", \"club\", \"college\", \"duty\", \"eaux\", \"know\", \"collection\", \"burst\", \"fun\", \"animal\", \"expectation\", \"persist\", \"insure\", \"tick\", \"account\", \"initiative\", \"tourist\", \"member\", \"example\", \"plant\", \"river\", \"ratio\", \"view\", \"coast\", \"latest\", \"invite\", \"help\", \"falsify\", \"allocation\", \"degree\", \"feel\", \"resort\", \"means\", \"excuse\", \"injury\", \"pupil\", \"shaft\", \"allow\", \"ton\", \"tube\", \"dress\", \"speaker\", \"double\", \"theater\", \"opposed\", \"holiday\", \"screw\", \"cutting\", \"picture\", \"laborer\", \"conservation\", \"kneel\", \"miracle\", \"primary\", \"nomination\", \"characteristic\", \"referral\", \"carbon\", \"valley\", \"hot\", \"climb\", \"wrestle\", \"motorist\", \"update\", \"loot\", \"mosquito\", \"delivery\", \"eagle\", \"guideline\", \"hurt\", \"feedback\", \"finish\", \"traffic\", \"competence\", \"serve\", \"archive\", \"feeling\", \"hope\", \"seal\", \"ear\", \"oven\", \"vote\", \"ballot\", \"study\", \"negative\", \"declaration\", \"particular\", \"pattern\", \"suburb\", \"intervention\", \"brake\", \"frequency\", \"drink\", \"affair\", \"contemporary\", \"prince\", \"dry\", \"mole\", \"lazy\", \"undermine\", \"radio\", \"legislation\", \"circumstance\", \"bear\", \"left\", \"pony\", \"industry\", \"mastermind\", \"criticism\", \"sheep\", \"failure\", \"chain\", \"depressed\", \"launch\", \"script\", \"green\", \"weave\", \"please\", \"surprise\", \"doctor\", \"revive\", \"banquet\", \"belong\", \"correction\", \"door\", \"image\", \"integrity\", \"intermediate\", \"sense\", \"formal\", \"cane\", \"gloom\", \"toast\", \"pension\", \"exception\", \"prey\", \"random\", \"nose\", \"predict\", \"needle\", \"satisfaction\", \"establish\", \"fit\", \"vigorous\", \"urgency\", \"X-ray\", \"equinox\", \"variety\", \"proclaim\", \"conceive\", \"bulb\", \"vegetarian\", \"available\", \"stake\", \"publicity\", \"strikebreaker\", \"portrait\", \"sink\", \"frog\", \"ruin\", \"studio\", \"match\", \"electron\", \"captain\", \"channel\", \"navy\", \"set\", \"recommend\", \"appoint\", \"liberal\", \"missile\", \"sample\", \"result\", \"poor\", \"efflux\", \"glance\", \"timetable\", \"advertise\", \"personality\", \"aunt\", \"dog\"],\n      transformTag: transformTag,\n      dropdown: {\n        enabled: 3\n      }\n    });\n\n    function transformTag(tagData) {\n      var states = ['success', 'primary', 'danger', 'success', 'warning', 'dark', 'primary', 'info'];\n      tagData[\"class\"] = 'tagify__tag tagify__tag--' + states[KTUtil.getRandomInt(0, 7)];\n\n      if (tagData.value.toLowerCase() == 'shit') {\n        tagData.value = 's✲✲t';\n      }\n    }\n\n    tagify.on('add', function (e) {\n      console.log(e.detail);\n    });\n    tagify.on('invalid', function (e) {\n      console.log(e, e.detail);\n    });\n  };\n\n  var demo5 = function demo5() {\n    // Init autocompletes\n    var toEl = document.getElementById('kt_tagify_5');\n    var tagifyTo = new Tagify(toEl, {\n      delimiters: \", \",\n      // add new tags when a comma or a space character is entered\n      maxTags: 10,\n      blacklist: [\"fuck\", \"shit\", \"pussy\"],\n      keepInvalidTags: true,\n      // do not remove invalid tags (but keep them marked as invalid)\n      whitelist: [{\n        value: 'Chris Muller',\n        email: 'chris.muller@wix.com',\n        initials: '',\n        initialsState: '',\n        pic: './assets/media/users/100_11.jpg',\n        \"class\": 'tagify__tag--primary'\n      }, {\n        value: 'Nick Bold',\n        email: 'nick.seo@gmail.com',\n        initials: 'SS',\n        initialsState: 'warning',\n        pic: ''\n      }, {\n        value: 'Alon Silko',\n        email: 'alon@keenthemes.com',\n        initials: '',\n        initialsState: '',\n        pic: './assets/media/users/100_6.jpg'\n      }, {\n        value: 'Sam Seanic',\n        email: 'sam.senic@loop.com',\n        initials: '',\n        initialsState: '',\n        pic: './assets/media/users/100_8.jpg'\n      }, {\n        value: 'Sara Loran',\n        email: 'sara.loran@tilda.com',\n        initials: '',\n        initialsState: '',\n        pic: './assets/media/users/100_9.jpg'\n      }, {\n        value: 'Eric Davok',\n        email: 'davok@mix.com',\n        initials: '',\n        initialsState: '',\n        pic: './assets/media/users/100_13.jpg'\n      }, {\n        value: 'Sam Seanic',\n        email: 'sam.senic@loop.com',\n        initials: '',\n        initialsState: '',\n        pic: './assets/media/users/100_13.jpg'\n      }, {\n        value: 'Lina Nilson',\n        email: 'lina.nilson@loop.com',\n        initials: 'LN',\n        initialsState: 'danger',\n        pic: './assets/media/users/100_15.jpg'\n      }],\n      templates: {\n        dropdownItem: function dropdownItem(tagData) {\n          try {\n            var html = '';\n            html += '<div class=\"tagify__dropdown__item\">';\n            html += '   <div class=\"d-flex align-items-center\">';\n            html += '       <span class=\"symbol sumbol-' + (tagData.initialsState ? tagData.initialsState : '') + ' mr-2\">';\n            html += '           <span class=\"symbol-label\" style=\"background-image: url(\\'' + (tagData.pic ? tagData.pic : '') + '\\')\">' + (tagData.initials ? tagData.initials : '') + '</span>';\n            html += '       </span>';\n            html += '       <div class=\"d-flex flex-column\">';\n            html += '           <a href=\"#\" class=\"text-dark-75 text-hover-primary font-weight-bold\">' + (tagData.value ? tagData.value : '') + '</a>';\n            html += '           <span class=\"text-muted font-weight-bold\">' + (tagData.email ? tagData.email : '') + '</span>';\n            html += '       </div>';\n            html += '   </div>';\n            html += '</div>';\n            return html;\n          } catch (err) {}\n        }\n      },\n      transformTag: function transformTag(tagData) {\n        tagData[\"class\"] = 'tagify__tag tagify__tag--primary';\n      },\n      dropdown: {\n        classname: \"color-blue\",\n        enabled: 1,\n        maxItems: 5\n      }\n    });\n  };\n\n  var demo6 = function demo6() {\n    var input = document.getElementById('kt_tagify_6');\n    var tagify = new Tagify(input, {\n      pattern: /^.{0,20}$/,\n      // Validate typed tag(s) by Regex. Here maximum chars length is defined as \"20\"\n      delimiters: \", \",\n      // add new tags when a comma or a space character is entered\n      maxTags: 6,\n      blacklist: [\"fuck\", \"shit\", \"pussy\"],\n      keepInvalidTags: true,\n      // do not remove invalid tags (but keep them marked as invalid)\n      whitelist: [\"temple\", \"stun\", \"detective\", \"sign\", \"passion\", \"routine\", \"deck\", \"discriminate\", \"relaxation\", \"fraud\", \"attractive\", \"soft\", \"forecast\", \"point\", \"thank\", \"stage\", \"eliminate\", \"effective\", \"flood\", \"passive\", \"skilled\", \"separation\", \"contact\", \"compromise\", \"reality\", \"district\", \"nationalist\", \"leg\", \"porter\", \"conviction\", \"worker\", \"vegetable\", \"commerce\", \"conception\", \"particle\", \"honor\", \"stick\", \"tail\", \"pumpkin\", \"core\", \"mouse\", \"egg\", \"population\", \"unique\", \"behavior\", \"onion\", \"disaster\", \"cute\", \"pipe\", \"sock\", \"dialect\", \"horse\", \"swear\", \"owner\", \"cope\", \"global\", \"improvement\", \"artist\", \"shed\", \"constant\", \"bond\", \"brink\", \"shower\", \"spot\", \"inject\", \"bowel\", \"homosexual\", \"trust\", \"exclude\", \"tough\", \"sickness\", \"prevalence\", \"sister\", \"resolution\", \"cattle\", \"cultural\", \"innocent\", \"burial\", \"bundle\", \"thaw\", \"respectable\", \"thirsty\", \"exposure\", \"team\", \"creed\", \"facade\", \"calendar\", \"filter\", \"utter\", \"dominate\", \"predator\", \"discover\", \"theorist\", \"hospitality\", \"damage\", \"woman\", \"rub\", \"crop\", \"unpleasant\", \"halt\", \"inch\", \"birthday\", \"lack\", \"throne\", \"maximum\", \"pause\", \"digress\", \"fossil\", \"policy\", \"instrument\", \"trunk\", \"frame\", \"measure\", \"hall\", \"support\", \"convenience\", \"house\", \"partnership\", \"inspector\", \"looting\", \"ranch\", \"asset\", \"rally\", \"explicit\", \"leak\", \"monarch\", \"ethics\", \"applied\", \"aviation\", \"dentist\", \"great\", \"ethnic\", \"sodium\", \"truth\", \"constellation\", \"lease\", \"guide\", \"break\", \"conclusion\", \"button\", \"recording\", \"horizon\", \"council\", \"paradox\", \"bride\", \"weigh\", \"like\", \"noble\", \"transition\", \"accumulation\", \"arrow\", \"stitch\", \"academy\", \"glimpse\", \"case\", \"researcher\", \"constitutional\", \"notion\", \"bathroom\", \"revolutionary\", \"soldier\", \"vehicle\", \"betray\", \"gear\", \"pan\", \"quarter\", \"embarrassment\", \"golf\", \"shark\", \"constitution\", \"club\", \"college\", \"duty\", \"eaux\", \"know\", \"collection\", \"burst\", \"fun\", \"animal\", \"expectation\", \"persist\", \"insure\", \"tick\", \"account\", \"initiative\", \"tourist\", \"member\", \"example\", \"plant\", \"river\", \"ratio\", \"view\", \"coast\", \"latest\", \"invite\", \"help\", \"falsify\", \"allocation\", \"degree\", \"feel\", \"resort\", \"means\", \"excuse\", \"injury\", \"pupil\", \"shaft\", \"allow\", \"ton\", \"tube\", \"dress\", \"speaker\", \"double\", \"theater\", \"opposed\", \"holiday\", \"screw\", \"cutting\", \"picture\", \"laborer\", \"conservation\", \"kneel\", \"miracle\", \"primary\", \"nomination\", \"characteristic\", \"referral\", \"carbon\", \"valley\", \"hot\", \"climb\", \"wrestle\", \"motorist\", \"update\", \"loot\", \"mosquito\", \"delivery\", \"eagle\", \"guideline\", \"hurt\", \"feedback\", \"finish\", \"traffic\", \"competence\", \"serve\", \"archive\", \"feeling\", \"hope\", \"seal\", \"ear\", \"oven\", \"vote\", \"ballot\", \"study\", \"negative\", \"declaration\", \"particular\", \"pattern\", \"suburb\", \"intervention\", \"brake\", \"frequency\", \"drink\", \"affair\", \"contemporary\", \"prince\", \"dry\", \"mole\", \"lazy\", \"undermine\", \"radio\", \"legislation\", \"circumstance\", \"bear\", \"left\", \"pony\", \"industry\", \"mastermind\", \"criticism\", \"sheep\", \"failure\", \"chain\", \"depressed\", \"launch\", \"script\", \"green\", \"weave\", \"please\", \"surprise\", \"doctor\", \"revive\", \"banquet\", \"belong\", \"correction\", \"door\", \"image\", \"integrity\", \"intermediate\", \"sense\", \"formal\", \"cane\", \"gloom\", \"toast\", \"pension\", \"exception\", \"prey\", \"random\", \"nose\", \"predict\", \"needle\", \"satisfaction\", \"establish\", \"fit\", \"vigorous\", \"urgency\", \"X-ray\", \"equinox\", \"variety\", \"proclaim\", \"conceive\", \"bulb\", \"vegetarian\", \"available\", \"stake\", \"publicity\", \"strikebreaker\", \"portrait\", \"sink\", \"frog\", \"ruin\", \"studio\", \"match\", \"electron\", \"captain\", \"channel\", \"navy\", \"set\", \"recommend\", \"appoint\", \"liberal\", \"missile\", \"sample\", \"result\", \"poor\", \"efflux\", \"glance\", \"timetable\", \"advertise\", \"personality\", \"aunt\", \"dog\"],\n      transformTag: transformTag,\n      dropdown: {\n        enabled: 3\n      }\n    });\n\n    function transformTag(tagData) {\n      var states = ['success', 'primary', 'danger', 'success', 'warning', 'dark', 'primary', 'info'];\n      tagData[\"class\"] = 'tagify__tag tagify__tag-light--' + states[KTUtil.getRandomInt(0, 7)];\n\n      if (tagData.value.toLowerCase() == 'shit') {\n        tagData.value = 's✲✲t';\n      }\n    }\n\n    tagify.on('add', function (e) {\n      console.log(e.detail);\n    });\n    tagify.on('invalid', function (e) {\n      console.log(e, e.detail);\n    });\n  };\n\n  return {\n    // public functions\n    init: function init() {\n      demo1();\n      demo1Readonly();\n      demo2();\n      demo3();\n      demo4();\n      demo5();\n      demo6();\n    }\n  };\n}();\n\njQuery(document).ready(function () {\n  KTTagifyDemos.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/crud/forms/widgets/tagify.js\n");

/***/ }),

/***/ 78:
/*!************************************************************************!*\
  !*** multi ./resources/metronic/js/pages/crud/forms/widgets/tagify.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/vagrant/laravel/concursos-publicos/resources/metronic/js/pages/crud/forms/widgets/tagify.js */"./resources/metronic/js/pages/crud/forms/widgets/tagify.js");


/***/ })

/******/ });