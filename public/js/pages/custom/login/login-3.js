/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 111);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/custom/login/login-3.js":
/*!*************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/login/login-3.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Class Definition\n\nvar KTLogin = function () {\n  var _buttonSpinnerClasses = 'spinner spinner-right spinner-white pr-15';\n\n  var _handleFormSignin = function _handleFormSignin() {\n    var form = KTUtil.getById('kt_login_singin_form');\n    var formSubmitUrl = KTUtil.attr(form, 'action');\n    var formSubmitButton = KTUtil.getById('kt_login_singin_form_submit_button');\n\n    if (!form) {\n      return;\n    }\n\n    FormValidation.formValidation(form, {\n      fields: {\n        username: {\n          validators: {\n            notEmpty: {\n              message: 'Username is required'\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: 'Password is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap({//\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\n          //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\n        })\n      }\n    }).on('core.form.valid', function () {\n      // Show loading state on button\n      KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, \"Please wait\"); // Simulate Ajax request\n\n      setTimeout(function () {\n        KTUtil.btnRelease(formSubmitButton);\n      }, 2000); // Form Validation & Ajax Submission: https://formvalidation.io/guide/examples/using-ajax-to-submit-the-form\n\n      /**\n            FormValidation.utils.fetch(formSubmitUrl, {\n                method: 'POST',\n      \tdataType: 'json',\n                params: {\n                    name: form.querySelector('[name=\"username\"]').value,\n                    email: form.querySelector('[name=\"password\"]').value,\n                },\n            }).then(function(response) { // Return valid JSON\n      \t// Release button\n      \tKTUtil.btnRelease(formSubmitButton);\n      \t\tif (response && typeof response === 'object' && response.status && response.status == 'success') {\n      \t\tSwal.fire({\n                     text: \"All is cool! Now you submit this form\",\n                     icon: \"success\",\n                     buttonsStyling: false,\n      \t\t\tconfirmButtonText: \"Ok, got it!\",\n      \t\t\tcustomClass: {\n      \t\t\t\tconfirmButton: \"btn font-weight-bold btn-light-primary\"\n      \t\t\t}\n                 }).then(function() {\n      \t\t\tKTUtil.scrollTop();\n      \t\t});\n      \t} else {\n      \t\tSwal.fire({\n                     text: \"Sorry, something went wrong, please try again.\",\n                     icon: \"error\",\n                     buttonsStyling: false,\n      \t\t\tconfirmButtonText: \"Ok, got it!\",\n      \t\t\tcustomClass: {\n      \t\t\t\tconfirmButton: \"btn font-weight-bold btn-light-primary\"\n      \t\t\t}\n                 }).then(function() {\n      \t\t\tKTUtil.scrollTop();\n      \t\t});\n      \t}\n            });\n      **/\n    }).on('core.form.invalid', function () {\n      Swal.fire({\n        text: \"Sorry, looks like there are some errors detected, please try again.\",\n        icon: \"error\",\n        buttonsStyling: false,\n        confirmButtonText: \"Ok, got it!\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-light-primary\"\n        }\n      }).then(function () {\n        KTUtil.scrollTop();\n      });\n    });\n  };\n\n  var _handleFormForgot = function _handleFormForgot() {\n    var form = KTUtil.getById('kt_login_forgot_form');\n    var formSubmitUrl = KTUtil.attr(form, 'action');\n    var formSubmitButton = KTUtil.getById('kt_login_forgot_form_submit_button');\n\n    if (!form) {\n      return;\n    }\n\n    FormValidation.formValidation(form, {\n      fields: {\n        email: {\n          validators: {\n            notEmpty: {\n              message: 'Email is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap({//\teleInvalidClass: '', // Repace with uncomment to hide bootstrap validation icons\n          //\teleValidClass: '',   // Repace with uncomment to hide bootstrap validation icons\n        })\n      }\n    }).on('core.form.valid', function () {\n      // Show loading state on button\n      KTUtil.btnWait(formSubmitButton, _buttonSpinnerClasses, \"Please wait\"); // Simulate Ajax request\n\n      setTimeout(function () {\n        KTUtil.btnRelease(formSubmitButton);\n      }, 2000);\n    }).on('core.form.invalid', function () {\n      Swal.fire({\n        text: \"Sorry, looks like there are some errors detected, please try again.\",\n        icon: \"error\",\n        buttonsStyling: false,\n        confirmButtonText: \"Ok, got it!\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-light-primary\"\n        }\n      }).then(function () {\n        KTUtil.scrollTop();\n      });\n    });\n  };\n\n  var _handleFormSignup = function _handleFormSignup() {\n    // Base elements\n    var wizardEl = KTUtil.getById('kt_login');\n    var form = KTUtil.getById('kt_login_signup_form');\n    var wizardObj;\n    var validations = [];\n\n    if (!form) {\n      return;\n    } // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    // Step 1\n\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        fname: {\n          validators: {\n            notEmpty: {\n              message: 'First name is required'\n            }\n          }\n        },\n        lname: {\n          validators: {\n            notEmpty: {\n              message: 'Last Name is required'\n            }\n          }\n        },\n        phone: {\n          validators: {\n            notEmpty: {\n              message: 'Phone is required'\n            }\n          }\n        },\n        email: {\n          validators: {\n            notEmpty: {\n              message: 'Email is required'\n            },\n            emailAddress: {\n              message: 'The value is not a valid email address'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 2\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        address1: {\n          validators: {\n            notEmpty: {\n              message: 'Address is required'\n            }\n          }\n        },\n        postcode: {\n          validators: {\n            notEmpty: {\n              message: 'Postcode is required'\n            }\n          }\n        },\n        city: {\n          validators: {\n            notEmpty: {\n              message: 'City is required'\n            }\n          }\n        },\n        state: {\n          validators: {\n            notEmpty: {\n              message: 'State is required'\n            }\n          }\n        },\n        country: {\n          validators: {\n            notEmpty: {\n              message: 'Country is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 3\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        delivery: {\n          validators: {\n            notEmpty: {\n              message: 'Delivery type is required'\n            }\n          }\n        },\n        packaging: {\n          validators: {\n            notEmpty: {\n              message: 'Packaging type is required'\n            }\n          }\n        },\n        preferreddelivery: {\n          validators: {\n            notEmpty: {\n              message: 'Preferred delivery window is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Step 4\n\n    validations.push(FormValidation.formValidation(form, {\n      fields: {\n        ccname: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card name is required'\n            }\n          }\n        },\n        ccnumber: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card number is required'\n            },\n            creditCard: {\n              message: 'The credit card number is not valid'\n            }\n          }\n        },\n        ccmonth: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card month is required'\n            }\n          }\n        },\n        ccyear: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card year is required'\n            }\n          }\n        },\n        cccvv: {\n          validators: {\n            notEmpty: {\n              message: 'Credit card CVV is required'\n            },\n            digits: {\n              message: 'The CVV value is not valid. Only numbers is allowed'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        // Bootstrap Framework Integration\n        bootstrap: new FormValidation.plugins.Bootstrap({\n          //eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    })); // Initialize form wizard\n\n    wizardObj = new KTWizard(wizardEl, {\n      startStep: 1,\n      // initial active step number\n      clickableSteps: false // allow step clicking\n\n    }); // Validation before going to next page\n\n    wizardObj.on('change', function (wizard) {\n      if (wizard.getStep() > wizard.getNewStep()) {\n        return; // Skip if stepped back\n      } // Validate form before change wizard step\n\n\n      var validator = validations[wizard.getStep() - 1]; // get validator for currnt step\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          if (status == 'Valid') {\n            wizard.goTo(wizard.getNewStep());\n            KTUtil.scrollTop();\n          } else {\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn font-weight-bold btn-light\"\n              }\n            }).then(function () {\n              KTUtil.scrollTop();\n            });\n          }\n        });\n      }\n\n      return false; // Do not change wizard step, further action will be handled by he validator\n    }); // Change event\n\n    wizardObj.on('changed', function (wizard) {\n      KTUtil.scrollTop();\n    }); // Submit event\n\n    wizardObj.on('submit', function (wizard) {\n      Swal.fire({\n        text: \"All is good! Please confirm the form submission.\",\n        icon: \"success\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, submit!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn font-weight-bold btn-primary\",\n          cancelButton: \"btn font-weight-bold btn-default\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.submit(); // Submit form\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been submitted!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Public Functions\n\n\n  return {\n    init: function init() {\n      _handleFormSignin();\n\n      _handleFormForgot();\n\n      _handleFormSignup();\n    }\n  };\n}(); // Class Initialization\n\n\njQuery(document).ready(function () {\n  KTLogin.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvY3VzdG9tL2xvZ2luL2xvZ2luLTMuanM/ODE5YiJdLCJuYW1lcyI6WyJLVExvZ2luIiwiX2J1dHRvblNwaW5uZXJDbGFzc2VzIiwiX2hhbmRsZUZvcm1TaWduaW4iLCJmb3JtIiwiS1RVdGlsIiwiZ2V0QnlJZCIsImZvcm1TdWJtaXRVcmwiLCJhdHRyIiwiZm9ybVN1Ym1pdEJ1dHRvbiIsIkZvcm1WYWxpZGF0aW9uIiwiZm9ybVZhbGlkYXRpb24iLCJmaWVsZHMiLCJ1c2VybmFtZSIsInZhbGlkYXRvcnMiLCJub3RFbXB0eSIsIm1lc3NhZ2UiLCJwYXNzd29yZCIsInBsdWdpbnMiLCJ0cmlnZ2VyIiwiVHJpZ2dlciIsInN1Ym1pdEJ1dHRvbiIsIlN1Ym1pdEJ1dHRvbiIsImJvb3RzdHJhcCIsIkJvb3RzdHJhcCIsIm9uIiwiYnRuV2FpdCIsInNldFRpbWVvdXQiLCJidG5SZWxlYXNlIiwiU3dhbCIsImZpcmUiLCJ0ZXh0IiwiaWNvbiIsImJ1dHRvbnNTdHlsaW5nIiwiY29uZmlybUJ1dHRvblRleHQiLCJjdXN0b21DbGFzcyIsImNvbmZpcm1CdXR0b24iLCJ0aGVuIiwic2Nyb2xsVG9wIiwiX2hhbmRsZUZvcm1Gb3Jnb3QiLCJlbWFpbCIsImVtYWlsQWRkcmVzcyIsIl9oYW5kbGVGb3JtU2lnbnVwIiwid2l6YXJkRWwiLCJ3aXphcmRPYmoiLCJ2YWxpZGF0aW9ucyIsInB1c2giLCJmbmFtZSIsImxuYW1lIiwicGhvbmUiLCJlbGVWYWxpZENsYXNzIiwiYWRkcmVzczEiLCJwb3N0Y29kZSIsImNpdHkiLCJzdGF0ZSIsImNvdW50cnkiLCJkZWxpdmVyeSIsInBhY2thZ2luZyIsInByZWZlcnJlZGRlbGl2ZXJ5IiwiY2NuYW1lIiwiY2NudW1iZXIiLCJjcmVkaXRDYXJkIiwiY2Ntb250aCIsImNjeWVhciIsImNjY3Z2IiwiZGlnaXRzIiwiS1RXaXphcmQiLCJzdGFydFN0ZXAiLCJjbGlja2FibGVTdGVwcyIsIndpemFyZCIsImdldFN0ZXAiLCJnZXROZXdTdGVwIiwidmFsaWRhdG9yIiwidmFsaWRhdGUiLCJzdGF0dXMiLCJnb1RvIiwic2hvd0NhbmNlbEJ1dHRvbiIsImNhbmNlbEJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b24iLCJyZXN1bHQiLCJ2YWx1ZSIsInN1Ym1pdCIsImRpc21pc3MiLCJpbml0IiwialF1ZXJ5IiwiZG9jdW1lbnQiLCJyZWFkeSJdLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsT0FBTyxHQUFHLFlBQVc7QUFDeEIsTUFBSUMscUJBQXFCLEdBQUcsMkNBQTVCOztBQUVBLE1BQUlDLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsR0FBVztBQUNsQyxRQUFJQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLHNCQUFmLENBQVg7QUFDQSxRQUFJQyxhQUFhLEdBQUdGLE1BQU0sQ0FBQ0csSUFBUCxDQUFZSixJQUFaLEVBQWtCLFFBQWxCLENBQXBCO0FBQ0EsUUFBSUssZ0JBQWdCLEdBQUdKLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlLG9DQUFmLENBQXZCOztBQUVBLFFBQUksQ0FBQ0YsSUFBTCxFQUFXO0FBQ1Y7QUFDQTs7QUFFRE0sa0JBQWMsQ0FDVEMsY0FETCxDQUVRUCxJQUZSLEVBR1E7QUFDSVEsWUFBTSxFQUFFO0FBQ2hCQyxnQkFBUSxFQUFFO0FBQ1RDLG9CQUFVLEVBQUU7QUFDWEMsb0JBQVEsRUFBRTtBQUNUQyxxQkFBTyxFQUFFO0FBREE7QUFEQztBQURILFNBRE07QUFRaEJDLGdCQUFRLEVBQUU7QUFDVEgsb0JBQVUsRUFBRTtBQUNYQyxvQkFBUSxFQUFFO0FBQ1RDLHFCQUFPLEVBQUU7QUFEQTtBQURDO0FBREg7QUFSTSxPQURaO0FBaUJJRSxhQUFPLEVBQUU7QUFDakJDLGVBQU8sRUFBRSxJQUFJVCxjQUFjLENBQUNRLE9BQWYsQ0FBdUJFLE9BQTNCLEVBRFE7QUFFakJDLG9CQUFZLEVBQUUsSUFBSVgsY0FBYyxDQUFDUSxPQUFmLENBQXVC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QkFBaUIsRUFBRSxjQUxWO0FBTVQyQyx3QkFBZ0IsRUFBRSxZQU5UO0FBT1QxQyxtQkFBVyxFQUFFO0FBQ1pDLHVCQUFhLEVBQUUsa0NBREg7QUFFWjBDLHNCQUFZLEVBQUU7QUFGRjtBQVBKLE9BQVYsRUFXR3pDLElBWEgsQ0FXUSxVQUFVMEMsTUFBVixFQUFrQjtBQUN6QixZQUFJQSxNQUFNLENBQUNDLEtBQVgsRUFBa0I7QUFDakI1RSxjQUFJLENBQUM2RSxNQUFMLEdBRGlCLENBQ0Y7QUFDZixTQUZELE1BRU8sSUFBSUYsTUFBTSxDQUFDRyxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQ3ZDckQsY0FBSSxDQUFDQyxJQUFMLENBQVU7QUFDVEMsZ0JBQUksRUFBRSxvQ0FERztBQUVUQyxnQkFBSSxFQUFFLE9BRkc7QUFHVEMsMEJBQWMsRUFBRSxLQUhQO0FBSVRDLDZCQUFpQixFQUFFLGFBSlY7QUFLVEMsdUJBQVcsRUFBRTtBQUNaQywyQkFBYSxFQUFFO0FBREg7QUFMSixXQUFWO0FBU0E7QUFDRCxPQXpCRDtBQTBCQSxLQTNCRDtBQTRCRyxHQTFSSixDQXhLd0IsQ0FvY3JCOzs7QUFDQSxTQUFPO0FBQ0grQyxRQUFJLEVBQUUsZ0JBQVc7QUFDYmhGLHVCQUFpQjs7QUFDMUJvQyx1QkFBaUI7O0FBQ2pCRyx1QkFBaUI7QUFDWDtBQUxFLEdBQVA7QUFPSCxDQTVjYSxFQUFkLEMsQ0E4Y0E7OztBQUNBMEMsTUFBTSxDQUFDQyxRQUFELENBQU4sQ0FBaUJDLEtBQWpCLENBQXVCLFlBQVc7QUFDOUJyRixTQUFPLENBQUNrRixJQUFSO0FBQ0gsQ0FGRCIsImZpbGUiOiIuL3Jlc291cmNlcy9tZXRyb25pYy9qcy9wYWdlcy9jdXN0b20vbG9naW4vbG9naW4tMy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vLyBDbGFzcyBEZWZpbml0aW9uXG52YXIgS1RMb2dpbiA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgX2J1dHRvblNwaW5uZXJDbGFzc2VzID0gJ3NwaW5uZXIgc3Bpbm5lci1yaWdodCBzcGlubmVyLXdoaXRlIHByLTE1JztcblxuXHR2YXIgX2hhbmRsZUZvcm1TaWduaW4gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZm9ybSA9IEtUVXRpbC5nZXRCeUlkKCdrdF9sb2dpbl9zaW5naW5fZm9ybScpO1xuXHRcdHZhciBmb3JtU3VibWl0VXJsID0gS1RVdGlsLmF0dHIoZm9ybSwgJ2FjdGlvbicpO1xuXHRcdHZhciBmb3JtU3VibWl0QnV0dG9uID0gS1RVdGlsLmdldEJ5SWQoJ2t0X2xvZ2luX3Npbmdpbl9mb3JtX3N1Ym1pdF9idXR0b24nKTtcblxuXHRcdGlmICghZm9ybSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdEZvcm1WYWxpZGF0aW9uXG5cdFx0ICAgIC5mb3JtVmFsaWRhdGlvbihcblx0XHQgICAgICAgIGZvcm0sXG5cdFx0ICAgICAgICB7XG5cdFx0ICAgICAgICAgICAgZmllbGRzOiB7XG5cdFx0XHRcdFx0XHR1c2VybmFtZToge1xuXHRcdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XG5cdFx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdVc2VybmFtZSBpcyByZXF1aXJlZCdcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRwYXNzd29yZDoge1xuXHRcdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XG5cdFx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdQYXNzd29yZCBpcyByZXF1aXJlZCdcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHQgICAgICAgICAgICB9LFxuXHRcdCAgICAgICAgICAgIHBsdWdpbnM6IHtcblx0XHRcdFx0XHRcdHRyaWdnZXI6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlRyaWdnZXIoKSxcblx0XHRcdFx0XHRcdHN1Ym1pdEJ1dHRvbjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuU3VibWl0QnV0dG9uKCksXG5cdCAgICAgICAgICAgIFx0XHQvL2RlZmF1bHRTdWJtaXQ6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkRlZmF1bHRTdWJtaXQoKSwgLy8gVW5jb21tZW50IHRoaXMgbGluZSB0byBlbmFibGUgbm9ybWFsIGJ1dHRvbiBzdWJtaXQgYWZ0ZXIgZm9ybSB2YWxpZGF0aW9uXG5cdFx0XHRcdFx0XHRib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcCh7XG5cdFx0XHRcdFx0XHQvL1x0ZWxlSW52YWxpZENsYXNzOiAnJywgLy8gUmVwYWNlIHdpdGggdW5jb21tZW50IHRvIGhpZGUgYm9vdHN0cmFwIHZhbGlkYXRpb24gaWNvbnNcblx0XHRcdFx0XHRcdC8vXHRlbGVWYWxpZENsYXNzOiAnJywgICAvLyBSZXBhY2Ugd2l0aCB1bmNvbW1lbnQgdG8gaGlkZSBib290c3RyYXAgdmFsaWRhdGlvbiBpY29uc1xuXHRcdFx0XHRcdFx0fSlcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgIClcblx0XHQgICAgLm9uKCdjb3JlLmZvcm0udmFsaWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gU2hvdyBsb2FkaW5nIHN0YXRlIG9uIGJ1dHRvblxuXHRcdFx0XHRLVFV0aWwuYnRuV2FpdChmb3JtU3VibWl0QnV0dG9uLCBfYnV0dG9uU3Bpbm5lckNsYXNzZXMsIFwiUGxlYXNlIHdhaXRcIik7XG5cblx0XHRcdFx0Ly8gU2ltdWxhdGUgQWpheCByZXF1ZXN0XG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0S1RVdGlsLmJ0blJlbGVhc2UoZm9ybVN1Ym1pdEJ1dHRvbik7XG5cdFx0XHRcdH0sIDIwMDApO1xuXG5cdFx0XHRcdC8vIEZvcm0gVmFsaWRhdGlvbiAmIEFqYXggU3VibWlzc2lvbjogaHR0cHM6Ly9mb3JtdmFsaWRhdGlvbi5pby9ndWlkZS9leGFtcGxlcy91c2luZy1hamF4LXRvLXN1Ym1pdC10aGUtZm9ybVxuXHRcdFx0XHQvKipcblx0XHQgICAgICAgIEZvcm1WYWxpZGF0aW9uLnV0aWxzLmZldGNoKGZvcm1TdWJtaXRVcmwsIHtcblx0XHQgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0XHRkYXRhVHlwZTogJ2pzb24nLFxuXHRcdCAgICAgICAgICAgIHBhcmFtczoge1xuXHRcdCAgICAgICAgICAgICAgICBuYW1lOiBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwidXNlcm5hbWVcIl0nKS52YWx1ZSxcblx0XHQgICAgICAgICAgICAgICAgZW1haWw6IGZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJwYXNzd29yZFwiXScpLnZhbHVlLFxuXHRcdCAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7IC8vIFJldHVybiB2YWxpZCBKU09OXG5cdFx0XHRcdFx0Ly8gUmVsZWFzZSBidXR0b25cblx0XHRcdFx0XHRLVFV0aWwuYnRuUmVsZWFzZShmb3JtU3VibWl0QnV0dG9uKTtcblxuXHRcdFx0XHRcdGlmIChyZXNwb25zZSAmJiB0eXBlb2YgcmVzcG9uc2UgPT09ICdvYmplY3QnICYmIHJlc3BvbnNlLnN0YXR1cyAmJiByZXNwb25zZS5zdGF0dXMgPT0gJ3N1Y2Nlc3MnKSB7XG5cdFx0XHRcdFx0XHRTd2FsLmZpcmUoe1xuXHRcdFx0ICAgICAgICAgICAgICAgIHRleHQ6IFwiQWxsIGlzIGNvb2whIE5vdyB5b3Ugc3VibWl0IHRoaXMgZm9ybVwiLFxuXHRcdFx0ICAgICAgICAgICAgICAgIGljb246IFwic3VjY2Vzc1wiLFxuXHRcdFx0ICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcblx0XHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcblx0XHRcdFx0XHRcdFx0Y3VzdG9tQ2xhc3M6IHtcblx0XHRcdFx0XHRcdFx0XHRjb25maXJtQnV0dG9uOiBcImJ0biBmb250LXdlaWdodC1ib2xkIGJ0bi1saWdodC1wcmltYXJ5XCJcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0ICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0S1RVdGlsLnNjcm9sbFRvcCgpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFN3YWwuZmlyZSh7XG5cdFx0XHQgICAgICAgICAgICAgICAgdGV4dDogXCJTb3JyeSwgc29tZXRoaW5nIHdlbnQgd3JvbmcsIHBsZWFzZSB0cnkgYWdhaW4uXCIsXG5cdFx0XHQgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxuXHRcdFx0ICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcblx0XHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcblx0XHRcdFx0XHRcdFx0Y3VzdG9tQ2xhc3M6IHtcblx0XHRcdFx0XHRcdFx0XHRjb25maXJtQnV0dG9uOiBcImJ0biBmb250LXdlaWdodC1ib2xkIGJ0bi1saWdodC1wcmltYXJ5XCJcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0ICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0S1RVdGlsLnNjcm9sbFRvcCgpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdCAgICAgICAgfSk7XG5cdFx0XHRcdCoqL1xuXHRcdCAgICB9KVxuXHRcdFx0Lm9uKCdjb3JlLmZvcm0uaW52YWxpZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRTd2FsLmZpcmUoe1xuXHRcdFx0XHRcdHRleHQ6IFwiU29ycnksIGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNvbWUgZXJyb3JzIGRldGVjdGVkLCBwbGVhc2UgdHJ5IGFnYWluLlwiLFxuXHRcdFx0XHRcdGljb246IFwiZXJyb3JcIixcblx0XHRcdFx0XHRidXR0b25zU3R5bGluZzogZmFsc2UsXG5cdFx0XHRcdFx0Y29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcblx0XHRcdFx0XHRjdXN0b21DbGFzczoge1xuXHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvbjogXCJidG4gZm9udC13ZWlnaHQtYm9sZCBidG4tbGlnaHQtcHJpbWFyeVwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdEtUVXRpbC5zY3JvbGxUb3AoKTtcblx0XHRcdFx0fSk7XG5cdFx0ICAgIH0pO1xuICAgIH1cblxuXHR2YXIgX2hhbmRsZUZvcm1Gb3Jnb3QgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZm9ybSA9IEtUVXRpbC5nZXRCeUlkKCdrdF9sb2dpbl9mb3Jnb3RfZm9ybScpO1xuXHRcdHZhciBmb3JtU3VibWl0VXJsID0gS1RVdGlsLmF0dHIoZm9ybSwgJ2FjdGlvbicpO1xuXHRcdHZhciBmb3JtU3VibWl0QnV0dG9uID0gS1RVdGlsLmdldEJ5SWQoJ2t0X2xvZ2luX2ZvcmdvdF9mb3JtX3N1Ym1pdF9idXR0b24nKTtcblxuXHRcdGlmICghZm9ybSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdEZvcm1WYWxpZGF0aW9uXG5cdFx0ICAgIC5mb3JtVmFsaWRhdGlvbihcblx0XHQgICAgICAgIGZvcm0sXG5cdFx0ICAgICAgICB7XG5cdFx0ICAgICAgICAgICAgZmllbGRzOiB7XG5cdFx0XHRcdFx0XHRlbWFpbDoge1xuXHRcdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XG5cdFx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdFbWFpbCBpcyByZXF1aXJlZCdcblx0XHRcdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XHRcdGVtYWlsQWRkcmVzczoge1xuXHRcdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ1RoZSB2YWx1ZSBpcyBub3QgYSB2YWxpZCBlbWFpbCBhZGRyZXNzJ1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdCAgICAgICAgICAgIH0sXG5cdFx0ICAgICAgICAgICAgcGx1Z2luczoge1xuXHRcdFx0XHRcdFx0dHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxuXHRcdFx0XHRcdFx0c3VibWl0QnV0dG9uOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5TdWJtaXRCdXR0b24oKSxcblx0ICAgICAgICAgICAgXHRcdC8vZGVmYXVsdFN1Ym1pdDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuRGVmYXVsdFN1Ym1pdCgpLCAvLyBVbmNvbW1lbnQgdGhpcyBsaW5lIHRvIGVuYWJsZSBub3JtYWwgYnV0dG9uIHN1Ym1pdCBhZnRlciBmb3JtIHZhbGlkYXRpb25cblx0XHRcdFx0XHRcdGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwKHtcblx0XHRcdFx0XHRcdC8vXHRlbGVJbnZhbGlkQ2xhc3M6ICcnLCAvLyBSZXBhY2Ugd2l0aCB1bmNvbW1lbnQgdG8gaGlkZSBib290c3RyYXAgdmFsaWRhdGlvbiBpY29uc1xuXHRcdFx0XHRcdFx0Ly9cdGVsZVZhbGlkQ2xhc3M6ICcnLCAgIC8vIFJlcGFjZSB3aXRoIHVuY29tbWVudCB0byBoaWRlIGJvb3RzdHJhcCB2YWxpZGF0aW9uIGljb25zXG5cdFx0XHRcdFx0XHR9KVxuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0XHQgICAgKVxuXHRcdCAgICAub24oJ2NvcmUuZm9ybS52YWxpZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBTaG93IGxvYWRpbmcgc3RhdGUgb24gYnV0dG9uXG5cdFx0XHRcdEtUVXRpbC5idG5XYWl0KGZvcm1TdWJtaXRCdXR0b24sIF9idXR0b25TcGlubmVyQ2xhc3NlcywgXCJQbGVhc2Ugd2FpdFwiKTtcblxuXHRcdFx0XHQvLyBTaW11bGF0ZSBBamF4IHJlcXVlc3Rcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRLVFV0aWwuYnRuUmVsZWFzZShmb3JtU3VibWl0QnV0dG9uKTtcblx0XHRcdFx0fSwgMjAwMCk7XG5cdFx0ICAgIH0pXG5cdFx0XHQub24oJ2NvcmUuZm9ybS5pbnZhbGlkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFN3YWwuZmlyZSh7XG5cdFx0XHRcdFx0dGV4dDogXCJTb3JyeSwgbG9va3MgbGlrZSB0aGVyZSBhcmUgc29tZSBlcnJvcnMgZGV0ZWN0ZWQsIHBsZWFzZSB0cnkgYWdhaW4uXCIsXG5cdFx0XHRcdFx0aWNvbjogXCJlcnJvclwiLFxuXHRcdFx0XHRcdGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcblx0XHRcdFx0XHRjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxuXHRcdFx0XHRcdGN1c3RvbUNsYXNzOiB7XG5cdFx0XHRcdFx0XHRjb25maXJtQnV0dG9uOiBcImJ0biBmb250LXdlaWdodC1ib2xkIGJ0bi1saWdodC1wcmltYXJ5XCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0S1RVdGlsLnNjcm9sbFRvcCgpO1xuXHRcdFx0XHR9KTtcblx0XHQgICAgfSk7XG4gICAgfVxuXG5cdHZhciBfaGFuZGxlRm9ybVNpZ251cCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIEJhc2UgZWxlbWVudHNcblx0XHR2YXIgd2l6YXJkRWwgPSBLVFV0aWwuZ2V0QnlJZCgna3RfbG9naW4nKTtcblx0XHR2YXIgZm9ybSA9IEtUVXRpbC5nZXRCeUlkKCdrdF9sb2dpbl9zaWdudXBfZm9ybScpO1xuXHRcdHZhciB3aXphcmRPYmo7XG5cdFx0dmFyIHZhbGlkYXRpb25zID0gW107XG5cblx0XHRpZiAoIWZvcm0pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJbml0IGZvcm0gdmFsaWRhdGlvbiBydWxlcy4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgRm9ybVZhbGlkYXRpb24gcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjpodHRwczovL2Zvcm12YWxpZGF0aW9uLmlvL1xuXHRcdC8vIFN0ZXAgMVxuXHRcdHZhbGlkYXRpb25zLnB1c2goRm9ybVZhbGlkYXRpb24uZm9ybVZhbGlkYXRpb24oXG5cdFx0XHRmb3JtLFxuXHRcdFx0e1xuXHRcdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0XHRmbmFtZToge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdGaXJzdCBuYW1lIGlzIHJlcXVpcmVkJ1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRsbmFtZToge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdMYXN0IE5hbWUgaXMgcmVxdWlyZWQnXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHBob25lOiB7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ1Bob25lIGlzIHJlcXVpcmVkJ1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRlbWFpbDoge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdFbWFpbCBpcyByZXF1aXJlZCdcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0ZW1haWxBZGRyZXNzOiB7XG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ1RoZSB2YWx1ZSBpcyBub3QgYSB2YWxpZCBlbWFpbCBhZGRyZXNzJ1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRwbHVnaW5zOiB7XG5cdFx0XHRcdFx0dHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxuXHRcdFx0XHRcdC8vIEJvb3RzdHJhcCBGcmFtZXdvcmsgSW50ZWdyYXRpb25cblx0XHRcdFx0XHRib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcCh7XG5cdFx0XHRcdFx0XHQvL2VsZUludmFsaWRDbGFzczogJycsXG5cdFx0XHRcdFx0XHRlbGVWYWxpZENsYXNzOiAnJyxcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0KSk7XG5cblx0XHQvLyBTdGVwIDJcblx0XHR2YWxpZGF0aW9ucy5wdXNoKEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKFxuXHRcdFx0Zm9ybSxcblx0XHRcdHtcblx0XHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdFx0YWRkcmVzczE6IHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQWRkcmVzcyBpcyByZXF1aXJlZCdcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cG9zdGNvZGU6IHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnUG9zdGNvZGUgaXMgcmVxdWlyZWQnXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGNpdHk6IHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQ2l0eSBpcyByZXF1aXJlZCdcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0c3RhdGU6IHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnU3RhdGUgaXMgcmVxdWlyZWQnXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGNvdW50cnk6IHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQ291bnRyeSBpcyByZXF1aXJlZCdcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0cGx1Z2luczoge1xuXHRcdFx0XHRcdHRyaWdnZXI6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlRyaWdnZXIoKSxcblx0XHRcdFx0XHQvLyBCb290c3RyYXAgRnJhbWV3b3JrIEludGVncmF0aW9uXG5cdFx0XHRcdFx0Ym9vdHN0cmFwOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5Cb290c3RyYXAoe1xuXHRcdFx0XHRcdFx0Ly9lbGVJbnZhbGlkQ2xhc3M6ICcnLFxuXHRcdFx0XHRcdFx0ZWxlVmFsaWRDbGFzczogJycsXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdCkpO1xuXG5cdFx0Ly8gU3RlcCAzXG5cdFx0dmFsaWRhdGlvbnMucHVzaChGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihcblx0XHRcdGZvcm0sXG5cdFx0XHR7XG5cdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdGRlbGl2ZXJ5OiB7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3JzOiB7XG5cdFx0XHRcdFx0XHRcdG5vdEVtcHR5OiB7XG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ0RlbGl2ZXJ5IHR5cGUgaXMgcmVxdWlyZWQnXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHBhY2thZ2luZzoge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdQYWNrYWdpbmcgdHlwZSBpcyByZXF1aXJlZCdcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cHJlZmVycmVkZGVsaXZlcnk6IHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnUHJlZmVycmVkIGRlbGl2ZXJ5IHdpbmRvdyBpcyByZXF1aXJlZCdcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0cGx1Z2luczoge1xuXHRcdFx0XHRcdHRyaWdnZXI6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLlRyaWdnZXIoKSxcblx0XHRcdFx0XHQvLyBCb290c3RyYXAgRnJhbWV3b3JrIEludGVncmF0aW9uXG5cdFx0XHRcdFx0Ym9vdHN0cmFwOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5Cb290c3RyYXAoe1xuXHRcdFx0XHRcdFx0Ly9lbGVJbnZhbGlkQ2xhc3M6ICcnLFxuXHRcdFx0XHRcdFx0ZWxlVmFsaWRDbGFzczogJycsXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdCkpO1xuXG5cdFx0Ly8gU3RlcCA0XG5cdFx0dmFsaWRhdGlvbnMucHVzaChGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihcblx0XHRcdGZvcm0sXG5cdFx0XHR7XG5cdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdGNjbmFtZToge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdDcmVkaXQgY2FyZCBuYW1lIGlzIHJlcXVpcmVkJ1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRjY251bWJlcjoge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdDcmVkaXQgY2FyZCBudW1iZXIgaXMgcmVxdWlyZWQnXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdGNyZWRpdENhcmQ6IHtcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnVGhlIGNyZWRpdCBjYXJkIG51bWJlciBpcyBub3QgdmFsaWQnXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGNjbW9udGg6IHtcblx0XHRcdFx0XHRcdHZhbGlkYXRvcnM6IHtcblx0XHRcdFx0XHRcdFx0bm90RW1wdHk6IHtcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAnQ3JlZGl0IGNhcmQgbW9udGggaXMgcmVxdWlyZWQnXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGNjeWVhcjoge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdDcmVkaXQgY2FyZCB5ZWFyIGlzIHJlcXVpcmVkJ1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRjY2N2djoge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yczoge1xuXHRcdFx0XHRcdFx0XHRub3RFbXB0eToge1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdDcmVkaXQgY2FyZCBDVlYgaXMgcmVxdWlyZWQnXG5cdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdGRpZ2l0czoge1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdUaGUgQ1ZWIHZhbHVlIGlzIG5vdCB2YWxpZC4gT25seSBudW1iZXJzIGlzIGFsbG93ZWQnXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHBsdWdpbnM6IHtcblx0XHRcdFx0XHR0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXG5cdFx0XHRcdFx0Ly8gQm9vdHN0cmFwIEZyYW1ld29yayBJbnRlZ3JhdGlvblxuXHRcdFx0XHRcdGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwKHtcblx0XHRcdFx0XHRcdC8vZWxlSW52YWxpZENsYXNzOiAnJyxcblx0XHRcdFx0XHRcdGVsZVZhbGlkQ2xhc3M6ICcnLFxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpKTtcblxuXHRcdC8vIEluaXRpYWxpemUgZm9ybSB3aXphcmRcblx0XHR3aXphcmRPYmogPSBuZXcgS1RXaXphcmQod2l6YXJkRWwsIHtcblx0XHRcdHN0YXJ0U3RlcDogMSwgLy8gaW5pdGlhbCBhY3RpdmUgc3RlcCBudW1iZXJcblx0XHRcdGNsaWNrYWJsZVN0ZXBzOiBmYWxzZSAgLy8gYWxsb3cgc3RlcCBjbGlja2luZ1xuXHRcdH0pO1xuXG5cdFx0Ly8gVmFsaWRhdGlvbiBiZWZvcmUgZ29pbmcgdG8gbmV4dCBwYWdlXG5cdFx0d2l6YXJkT2JqLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAod2l6YXJkKSB7XG5cdFx0XHRpZiAod2l6YXJkLmdldFN0ZXAoKSA+IHdpemFyZC5nZXROZXdTdGVwKCkpIHtcblx0XHRcdFx0cmV0dXJuOyAvLyBTa2lwIGlmIHN0ZXBwZWQgYmFja1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBWYWxpZGF0ZSBmb3JtIGJlZm9yZSBjaGFuZ2Ugd2l6YXJkIHN0ZXBcblx0XHRcdHZhciB2YWxpZGF0b3IgPSB2YWxpZGF0aW9uc1t3aXphcmQuZ2V0U3RlcCgpIC0gMV07IC8vIGdldCB2YWxpZGF0b3IgZm9yIGN1cnJudCBzdGVwXG5cblx0XHRcdGlmICh2YWxpZGF0b3IpIHtcblx0XHRcdFx0dmFsaWRhdG9yLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XG5cdFx0XHRcdFx0aWYgKHN0YXR1cyA9PSAnVmFsaWQnKSB7XG5cdFx0XHRcdFx0XHR3aXphcmQuZ29Ubyh3aXphcmQuZ2V0TmV3U3RlcCgpKTtcblxuXHRcdFx0XHRcdFx0S1RVdGlsLnNjcm9sbFRvcCgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRTd2FsLmZpcmUoe1xuXHRcdFx0XHRcdFx0XHR0ZXh0OiBcIlNvcnJ5LCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzb21lIGVycm9ycyBkZXRlY3RlZCwgcGxlYXNlIHRyeSBhZ2Fpbi5cIixcblx0XHRcdFx0XHRcdFx0aWNvbjogXCJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRidXR0b25zU3R5bGluZzogZmFsc2UsXG5cdFx0XHRcdFx0XHRcdGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXG5cdFx0XHRcdFx0XHRcdGN1c3RvbUNsYXNzOiB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvbjogXCJidG4gZm9udC13ZWlnaHQtYm9sZCBidG4tbGlnaHRcIlxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0S1RVdGlsLnNjcm9sbFRvcCgpO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlOyAgLy8gRG8gbm90IGNoYW5nZSB3aXphcmQgc3RlcCwgZnVydGhlciBhY3Rpb24gd2lsbCBiZSBoYW5kbGVkIGJ5IGhlIHZhbGlkYXRvclxuXHRcdH0pO1xuXG5cdFx0Ly8gQ2hhbmdlIGV2ZW50XG5cdFx0d2l6YXJkT2JqLm9uKCdjaGFuZ2VkJywgZnVuY3Rpb24gKHdpemFyZCkge1xuXHRcdFx0S1RVdGlsLnNjcm9sbFRvcCgpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gU3VibWl0IGV2ZW50XG5cdFx0d2l6YXJkT2JqLm9uKCdzdWJtaXQnLCBmdW5jdGlvbiAod2l6YXJkKSB7XG5cdFx0XHRTd2FsLmZpcmUoe1xuXHRcdFx0XHR0ZXh0OiBcIkFsbCBpcyBnb29kISBQbGVhc2UgY29uZmlybSB0aGUgZm9ybSBzdWJtaXNzaW9uLlwiLFxuXHRcdFx0XHRpY29uOiBcInN1Y2Nlc3NcIixcblx0XHRcdFx0c2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcblx0XHRcdFx0YnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxuXHRcdFx0XHRjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIHN1Ym1pdCFcIixcblx0XHRcdFx0Y2FuY2VsQnV0dG9uVGV4dDogXCJObywgY2FuY2VsXCIsXG5cdFx0XHRcdGN1c3RvbUNsYXNzOiB7XG5cdFx0XHRcdFx0Y29uZmlybUJ1dHRvbjogXCJidG4gZm9udC13ZWlnaHQtYm9sZCBidG4tcHJpbWFyeVwiLFxuXHRcdFx0XHRcdGNhbmNlbEJ1dHRvbjogXCJidG4gZm9udC13ZWlnaHQtYm9sZCBidG4tZGVmYXVsdFwiXG5cdFx0XHRcdH1cblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdFx0XHRpZiAocmVzdWx0LnZhbHVlKSB7XG5cdFx0XHRcdFx0Zm9ybS5zdWJtaXQoKTsgLy8gU3VibWl0IGZvcm1cblx0XHRcdFx0fSBlbHNlIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHtcblx0XHRcdFx0XHRTd2FsLmZpcmUoe1xuXHRcdFx0XHRcdFx0dGV4dDogXCJZb3VyIGZvcm0gaGFzIG5vdCBiZWVuIHN1Ym1pdHRlZCEuXCIsXG5cdFx0XHRcdFx0XHRpY29uOiBcImVycm9yXCIsXG5cdFx0XHRcdFx0XHRidXR0b25zU3R5bGluZzogZmFsc2UsXG5cdFx0XHRcdFx0XHRjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxuXHRcdFx0XHRcdFx0Y3VzdG9tQ2xhc3M6IHtcblx0XHRcdFx0XHRcdFx0Y29uZmlybUJ1dHRvbjogXCJidG4gZm9udC13ZWlnaHQtYm9sZCBidG4tcHJpbWFyeVwiLFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcbiAgICB9XG5cbiAgICAvLyBQdWJsaWMgRnVuY3Rpb25zXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfaGFuZGxlRm9ybVNpZ25pbigpO1xuXHRcdFx0X2hhbmRsZUZvcm1Gb3Jnb3QoKTtcblx0XHRcdF9oYW5kbGVGb3JtU2lnbnVwKCk7XG4gICAgICAgIH1cbiAgICB9O1xufSgpO1xuXG4vLyBDbGFzcyBJbml0aWFsaXphdGlvblxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBLVExvZ2luLmluaXQoKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/login/login-3.js\n");

/***/ }),

/***/ 111:
/*!*******************************************************************!*\
  !*** multi ./resources/metronic/js/pages/custom/login/login-3.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/vagrant/laravel/concursos-publicos/resources/metronic/js/pages/custom/login/login-3.js */"./resources/metronic/js/pages/custom/login/login-3.js");


/***/ })

/******/ });