/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 140);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/metronic/js/pages/features/charts/flotcharts.js":
/*!*******************************************************************!*\
  !*** ./resources/metronic/js/pages/features/charts/flotcharts.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Class definition\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar KTFlotchartsDemo = function () {\n  // Private functions\n  var demo1 = function demo1() {\n    var data = [];\n    var totalPoints = 250; // random data generator for plot charts\n\n    function getRandomData() {\n      if (data.length > 0) data = data.slice(1); // do a random walk\n\n      while (data.length < totalPoints) {\n        var prev = data.length > 0 ? data[data.length - 1] : 50;\n        var y = prev + Math.random() * 10 - 5;\n        if (y < 0) y = 0;\n        if (y > 100) y = 100;\n        data.push(y);\n      } // zip the generated y values with the x values\n\n\n      var res = [];\n\n      for (var i = 0; i < data.length; ++i) {\n        res.push([i, data[i]]);\n      }\n\n      return res;\n    }\n\n    var d1 = [];\n\n    for (var i = 0; i < Math.PI * 2; i += 0.25) {\n      d1.push([i, Math.sin(i)]);\n    }\n\n    var d2 = [];\n\n    for (var i = 0; i < Math.PI * 2; i += 0.25) {\n      d2.push([i, Math.cos(i)]);\n    }\n\n    var d3 = [];\n\n    for (var i = 0; i < Math.PI * 2; i += 0.1) {\n      d3.push([i, Math.tan(i)]);\n    }\n\n    $.plot($(\"#kt_flotcharts_1\"), [{\n      label: \"sin(x)\",\n      data: d1,\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }, {\n      label: \"cos(x)\",\n      data: d2,\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }, {\n      label: \"tan(x)\",\n      data: d3,\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }], {\n      colors: [KTApp.getSettings()['colors']['theme']['base'][\"success\"], KTApp.getSettings()['colors']['theme']['base'][\"primary\"], KTApp.getSettings()['colors']['theme']['base'][\"danger\"]],\n      series: {\n        lines: {\n          show: true\n        },\n        points: {\n          show: true,\n          fill: true,\n          radius: 3,\n          lineWidth: 1\n        }\n      },\n      xaxis: {\n        tickColor: \"#eee\",\n        ticks: [0, [Math.PI / 2, \"\\u03C0/2\"], [Math.PI, \"\\u03C0\"], [Math.PI * 3 / 2, \"3\\u03C0/2\"], [Math.PI * 2, \"2\\u03C0\"]]\n      },\n      yaxis: {\n        tickColor: \"#eee\",\n        ticks: 10,\n        min: -2,\n        max: 2\n      },\n      grid: {\n        borderColor: \"#eee\",\n        borderWidth: 1\n      }\n    });\n  };\n\n  var demo2 = function demo2() {\n    function randValue() {\n      return Math.floor(Math.random() * (1 + 40 - 20)) + 20;\n    }\n\n    var pageviews = [[1, randValue()], [2, randValue()], [3, 2 + randValue()], [4, 3 + randValue()], [5, 5 + randValue()], [6, 10 + randValue()], [7, 15 + randValue()], [8, 20 + randValue()], [9, 25 + randValue()], [10, 30 + randValue()], [11, 35 + randValue()], [12, 25 + randValue()], [13, 15 + randValue()], [14, 20 + randValue()], [15, 45 + randValue()], [16, 50 + randValue()], [17, 65 + randValue()], [18, 70 + randValue()], [19, 85 + randValue()], [20, 80 + randValue()], [21, 75 + randValue()], [22, 80 + randValue()], [23, 75 + randValue()], [24, 70 + randValue()], [25, 65 + randValue()], [26, 75 + randValue()], [27, 80 + randValue()], [28, 85 + randValue()], [29, 90 + randValue()], [30, 95 + randValue()]];\n    var visitors = [[1, randValue() - 5], [2, randValue() - 5], [3, randValue() - 5], [4, 6 + randValue()], [5, 5 + randValue()], [6, 20 + randValue()], [7, 25 + randValue()], [8, 36 + randValue()], [9, 26 + randValue()], [10, 38 + randValue()], [11, 39 + randValue()], [12, 50 + randValue()], [13, 51 + randValue()], [14, 12 + randValue()], [15, 13 + randValue()], [16, 14 + randValue()], [17, 15 + randValue()], [18, 15 + randValue()], [19, 16 + randValue()], [20, 17 + randValue()], [21, 18 + randValue()], [22, 19 + randValue()], [23, 20 + randValue()], [24, 21 + randValue()], [25, 14 + randValue()], [26, 24 + randValue()], [27, 25 + randValue()], [28, 26 + randValue()], [29, 27 + randValue()], [30, 31 + randValue()]];\n    var plot = $.plot($(\"#kt_flotcharts_2\"), [{\n      data: pageviews,\n      label: \"Unique Visits\",\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }, {\n      data: visitors,\n      label: \"Page Views\",\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }], {\n      series: {\n        lines: {\n          show: true,\n          lineWidth: 2,\n          fill: true,\n          fillColor: {\n            colors: [{\n              opacity: 0.05\n            }, {\n              opacity: 0.01\n            }]\n          }\n        },\n        points: {\n          show: true,\n          radius: 3,\n          lineWidth: 1\n        },\n        shadowSize: 2\n      },\n      grid: {\n        hoverable: true,\n        clickable: true,\n        tickColor: \"#eee\",\n        borderColor: \"#eee\",\n        borderWidth: 1\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base'][\"primary\"], KTApp.getSettings()['colors']['theme']['base'][\"danger\"]],\n      xaxis: {\n        ticks: 11,\n        tickDecimals: 0,\n        tickColor: \"#eee\"\n      },\n      yaxis: {\n        ticks: 11,\n        tickDecimals: 0,\n        tickColor: \"#eee\"\n      }\n    });\n\n    function showTooltip(x, y, contents) {\n      $('<div id=\"tooltip\">' + contents + '</div>').css({\n        position: 'absolute',\n        display: 'none',\n        top: y + 5,\n        left: x + 15,\n        border: '1px solid #333',\n        padding: '4px',\n        color: '#fff',\n        'border-radius': '3px',\n        'background-color': '#333',\n        opacity: 0.80\n      }).appendTo(\"body\").fadeIn(200);\n    }\n\n    var previousPoint = null;\n    $(\"#chart_2\").bind(\"plothover\", function (event, pos, item) {\n      $(\"#x\").text(pos.x.toFixed(2));\n      $(\"#y\").text(pos.y.toFixed(2));\n\n      if (item) {\n        if (previousPoint != item.dataIndex) {\n          previousPoint = item.dataIndex;\n          $(\"#tooltip\").remove();\n          var x = item.datapoint[0].toFixed(2),\n              y = item.datapoint[1].toFixed(2);\n          showTooltip(item.pageX, item.pageY, item.series.label + \" of \" + x + \" = \" + y);\n        }\n      } else {\n        $(\"#tooltip\").remove();\n        previousPoint = null;\n      }\n    });\n  };\n\n  var demo3 = function demo3() {\n    var sin = [],\n        cos = [];\n\n    for (var i = 0; i < 14; i += 0.1) {\n      sin.push([i, Math.sin(i)]);\n      cos.push([i, Math.cos(i)]);\n    }\n\n    var plot = $.plot($(\"#kt_flotcharts_3\"), [{\n      data: sin,\n      label: \"sin(x) = -0.00\",\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }, {\n      data: cos,\n      label: \"cos(x) = -0.00\",\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }], {\n      colors: [KTApp.getSettings()['colors']['theme']['base'][\"primary\"], KTApp.getSettings()['colors']['theme']['base'][\"warning\"]],\n      series: {\n        lines: {\n          show: true\n        }\n      },\n      crosshair: {\n        mode: \"x\"\n      },\n      grid: {\n        hoverable: true,\n        autoHighlight: false,\n        tickColor: \"#eee\",\n        borderColor: \"#eee\",\n        borderWidth: 1\n      },\n      yaxis: {\n        min: -1.2,\n        max: 1.2\n      }\n    });\n    var legends = $(\"#kt_flotcharts_3 .legendLabel\");\n    legends.each(function () {\n      // fix the widths so they don't jump around\n      $(this).css('width', $(this).width());\n    });\n    var updateLegendTimeout = null;\n    var latestPosition = null;\n\n    function updateLegend() {\n      updateLegendTimeout = null;\n      var pos = latestPosition;\n      var axes = plot.getAxes();\n      if (pos.x < axes.xaxis.min || pos.x > axes.xaxis.max || pos.y < axes.yaxis.min || pos.y > axes.yaxis.max) return;\n      var i,\n          j,\n          dataset = plot.getData();\n\n      for (i = 0; i < dataset.length; ++i) {\n        var series = dataset[i]; // find the nearest points, x-wise\n\n        for (j = 0; j < series.data.length; ++j) {\n          if (series.data[j][0] > pos.x) break;\n        } // now interpolate\n\n\n        var y,\n            p1 = series.data[j - 1],\n            p2 = series.data[j];\n        if (p1 == null) y = p2[1];else if (p2 == null) y = p1[1];else y = p1[1] + (p2[1] - p1[1]) * (pos.x - p1[0]) / (p2[0] - p1[0]);\n        legends.eq(i).text(series.label.replace(/=.*/, \"= \" + y.toFixed(2)));\n      }\n    }\n\n    $(\"#kt_flotcharts_3\").bind(\"plothover\", function (event, pos, item) {\n      latestPosition = pos;\n      if (!updateLegendTimeout) updateLegendTimeout = setTimeout(updateLegend, 50);\n    });\n  };\n\n  var demo4 = function demo4() {\n    var _options;\n\n    var data = [];\n    var totalPoints = 250; // random data generator for plot charts\n\n    function getRandomData() {\n      if (data.length > 0) data = data.slice(1); // do a random walk\n\n      while (data.length < totalPoints) {\n        var prev = data.length > 0 ? data[data.length - 1] : 50;\n        var y = prev + Math.random() * 10 - 5;\n        if (y < 0) y = 0;\n        if (y > 100) y = 100;\n        data.push(y);\n      } // zip the generated y values with the x values\n\n\n      var res = [];\n\n      for (var i = 0; i < data.length; ++i) {\n        res.push([i, data[i]]);\n      }\n\n      return res;\n    } //server load\n\n\n    var options = (_options = {\n      colors: [KTApp.getSettings()['colors']['theme']['base'][\"danger\"], KTApp.getSettings()['colors']['theme']['base'][\"primary\"]],\n      series: {\n        shadowSize: 1\n      },\n      lines: {\n        show: true,\n        lineWidth: 0.5,\n        fill: true,\n        fillColor: {\n          colors: [{\n            opacity: 0.1\n          }, {\n            opacity: 1\n          }]\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        tickColor: \"#eee\",\n        tickFormatter: function tickFormatter(v) {\n          return v + \"%\";\n        }\n      },\n      xaxis: {\n        show: false\n      }\n    }, _defineProperty(_options, \"colors\", [KTApp.getSettings()['colors']['theme']['base'][\"primary\"]]), _defineProperty(_options, \"grid\", {\n      tickColor: \"#eee\",\n      borderWidth: 0\n    }), _options);\n    var updateInterval = 30;\n    var plot = $.plot($(\"#kt_flotcharts_4\"), [getRandomData()], options);\n\n    function update() {\n      plot.setData([getRandomData()]);\n      plot.draw();\n      setTimeout(update, updateInterval);\n    }\n\n    update();\n  };\n\n  var demo5 = function demo5() {\n    var d1 = [];\n\n    for (var i = 0; i <= 10; i += 1) {\n      d1.push([i, parseInt(Math.random() * 30)]);\n    }\n\n    var d2 = [];\n\n    for (var i = 0; i <= 10; i += 1) {\n      d2.push([i, parseInt(Math.random() * 30)]);\n    }\n\n    var d3 = [];\n\n    for (var i = 0; i <= 10; i += 1) {\n      d3.push([i, parseInt(Math.random() * 30)]);\n    }\n\n    var stack = 0,\n        bars = true,\n        lines = false,\n        steps = false;\n\n    function plotWithOptions() {\n      $.plot($(\"#kt_flotcharts_5\"), [{\n        label: \"sales\",\n        data: d1,\n        lines: {\n          lineWidth: 1\n        },\n        shadowSize: 0\n      }, {\n        label: \"tax\",\n        data: d2,\n        lines: {\n          lineWidth: 1\n        },\n        shadowSize: 0\n      }, {\n        label: \"profit\",\n        data: d3,\n        lines: {\n          lineWidth: 1\n        },\n        shadowSize: 0\n      }], {\n        colors: [KTApp.getSettings()['colors']['theme']['base'][\"danger\"], KTApp.getSettings()['colors']['theme']['base'][\"primary\"]],\n        series: {\n          stack: stack,\n          lines: {\n            show: lines,\n            fill: true,\n            steps: steps,\n            lineWidth: 0 // in pixels\n\n          },\n          bars: {\n            show: bars,\n            barWidth: 0.5,\n            lineWidth: 0,\n            // in pixels\n            shadowSize: 0,\n            align: 'center'\n          }\n        },\n        grid: {\n          tickColor: \"#eee\",\n          borderColor: \"#eee\",\n          borderWidth: 1\n        }\n      });\n    }\n\n    $(\".stackControls input\").click(function (e) {\n      e.preventDefault();\n      stack = $(this).val() == \"With stacking\" ? true : null;\n      plotWithOptions();\n    });\n    $(\".graphControls input\").click(function (e) {\n      e.preventDefault();\n      bars = $(this).val().indexOf(\"Bars\") != -1;\n      lines = $(this).val().indexOf(\"Lines\") != -1;\n      steps = $(this).val().indexOf(\"steps\") != -1;\n      plotWithOptions();\n    });\n    plotWithOptions();\n  };\n\n  var demo6 = function demo6() {\n    // bar chart:\n    var data = GenerateSeries(0);\n\n    function GenerateSeries(added) {\n      var data = [];\n      var start = 100 + added;\n      var end = 200 + added;\n\n      for (var i = 1; i <= 20; i++) {\n        var d = Math.floor(Math.random() * (end - start + 1) + start);\n        data.push([i, d]);\n        start++;\n        end++;\n      }\n\n      return data;\n    }\n\n    var options = {\n      colors: [KTApp.getSettings()['colors']['theme']['base'][\"success\"], KTApp.getSettings()['colors']['theme']['base'][\"primary\"]],\n      series: {\n        bars: {\n          show: true\n        }\n      },\n      bars: {\n        barWidth: 0.8,\n        lineWidth: 0,\n        // in pixels\n        shadowSize: 0,\n        align: 'left'\n      },\n      grid: {\n        tickColor: \"#eee\",\n        borderColor: \"#eee\",\n        borderWidth: 1\n      }\n    };\n    $.plot($(\"#kt_flotcharts_6\"), [{\n      data: data,\n      lines: {\n        lineWidth: 1\n      },\n      shadowSize: 0\n    }], options);\n  };\n\n  var demo7 = function demo7() {\n    // horizontal bar chart:\n    var data1 = [[10, 10], [20, 20], [30, 30], [40, 40], [50, 50]];\n    var options = {\n      colors: [KTApp.getSettings()['colors']['theme']['base'][\"primary\"]],\n      series: {\n        bars: {\n          show: true\n        }\n      },\n      bars: {\n        horizontal: true,\n        barWidth: 6,\n        lineWidth: 0,\n        // in pixels\n        shadowSize: 0,\n        align: 'left'\n      },\n      grid: {\n        tickColor: \"#eee\",\n        borderColor: \"#eee\",\n        borderWidth: 1\n      }\n    };\n    $.plot($(\"#kt_flotcharts_7\"), [data1], options);\n  };\n\n  var demo8 = function demo8() {\n    var data = [{\n      label: \"CSS\",\n      data: 10,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"primary\"]\n    }, {\n      label: \"HTML5\",\n      data: 40,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"success\"]\n    }, {\n      label: \"PHP\",\n      data: 30,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"danger\"]\n    }, {\n      label: \"Angular\",\n      data: 20,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"warning\"]\n    }];\n    $.plot($(\"#kt_flotcharts_8\"), data, {\n      series: {\n        pie: {\n          show: true\n        }\n      }\n    });\n  };\n\n  var demo9 = function demo9() {\n    var data = [{\n      label: \"USA\",\n      data: 10,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"primary\"]\n    }, {\n      label: \"Germany\",\n      data: 25,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"success\"]\n    }, {\n      label: \"Norway\",\n      data: 30,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"danger\"]\n    }, {\n      label: \"Malaysia\",\n      data: 15,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"warning\"]\n    }, {\n      label: \"France\",\n      data: 10,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"info\"]\n    }];\n    $.plot($(\"#kt_flotcharts_9\"), data, {\n      series: {\n        pie: {\n          show: true\n        }\n      },\n      legend: {\n        show: false\n      }\n    });\n  };\n\n  var demo10 = function demo10() {\n    var data = [{\n      label: \"Google\",\n      data: 20,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"primary\"]\n    }, {\n      label: \"Twitter\",\n      data: 35,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"success\"]\n    }, {\n      label: \"Linkedin\",\n      data: 20,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"danger\"]\n    }, {\n      label: \"Instagram\",\n      data: 25,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"warning\"]\n    }, {\n      label: \"Facebook\",\n      data: 10,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"info\"]\n    }];\n    $.plot($(\"#kt_flotcharts_10\"), data, {\n      series: {\n        pie: {\n          show: true,\n          radius: 1,\n          label: {\n            show: true,\n            radius: 1,\n            formatter: function formatter(label, series) {\n              return '<div style=\"font-size:8pt;text-align:center;padding:2px;color:white;\">' + label + '<br/>' + Math.round(series.percent) + '%</div>';\n            },\n            background: {\n              opacity: 0.8\n            }\n          }\n        }\n      },\n      legend: {\n        show: false\n      }\n    });\n  };\n\n  var demo11 = function demo11() {\n    var data = [{\n      label: \"Vue\",\n      data: 13,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"danger\"]\n    }, {\n      label: \"Angular\",\n      data: 25,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"success\"]\n    }, {\n      label: \"React\",\n      data: 15,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"primary\"]\n    }, {\n      label: \"Ember\",\n      data: 10,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"warning\"]\n    }, {\n      label: \"Backbone\",\n      data: 8,\n      color: KTApp.getSettings()['colors']['theme']['base'][\"info\"]\n    }];\n    $.plot($(\"#kt_flotcharts_11\"), data, {\n      series: {\n        pie: {\n          show: true,\n          radius: 1,\n          label: {\n            show: true,\n            radius: 1,\n            formatter: function formatter(label, series) {\n              return '<div style=\"font-size:8pt;text-align:center;padding:2px;color:white;\">' + label + '<br/>' + Math.round(series.percent) + '%</div>';\n            },\n            background: {\n              opacity: 0.8\n            }\n          }\n        }\n      },\n      legend: {\n        show: false\n      }\n    });\n  };\n\n  return {\n    // public functions\n    init: function init() {\n      // default charts\n      demo1();\n      demo2();\n      demo3();\n      demo4();\n      demo5();\n      demo6();\n      demo7(); // pie charts\n\n      demo8();\n      demo9();\n      demo10();\n      demo11();\n    }\n  };\n}();\n\njQuery(document).ready(function () {\n  KTFlotchartsDemo.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/features/charts/flotcharts.js\n");

/***/ }),

/***/ 140:
/*!*************************************************************************!*\
  !*** multi ./resources/metronic/js/pages/features/charts/flotcharts.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/vagrant/laravel/concursos-publicos/resources/metronic/js/pages/features/charts/flotcharts.js */"./resources/metronic/js/pages/features/charts/flotcharts.js");


/***/ })

/******/ });